// Tests here inspired by HiFi-LoFi's AudioFFT tests
// https://github.com/HiFi-LoFi/AudioFFT
//
// I increased the accuracy of some of the test references to test down to a
// tolerance of 1e-12

var Ooura = require('../ooura.js')
const assert = require('assert');

var CheckBuffers = function(a, b) {
    const TOLERANCE = 1e-12;
    assert.equal(a.length, b.length);
    let diffs = 0;
    for(let nn=0; nn<a.length; nn++) {
        if(Math.abs(a[nn] - b[nn])>TOLERANCE) {
            diffs++;
        }
    }
    return diffs;
}

var TestCorrectness = function(reRef, imRef) {
    assert.equal(reRef.length, imRef.length);
    const size=Ooura.realSize(reRef.length);

    let input = Float64Array.from(Array(size), (e,i)=>i+1); //fancy-pants way of making 1,2,3, . .

    let oo = new Ooura(size);
    let re = new Float64Array(oo.getComplexSize());
    let im = new Float64Array(oo.getComplexSize());
    let result = new Object;

    oo.fft(input.buffer, re.buffer, im.buffer);

    result.reDiffs = CheckBuffers(re, reRef);
    result.imDiffs = CheckBuffers(im, imRef);

    let backwards = new Float64Array(oo.getRealSize());
    oo.ifft(backwards.buffer, re.buffer, im.buffer);
    result.reverseDiffs = CheckBuffers(backwards, input);

    return result;
}


describe("Function of the FFT routines", function () {

    it("should pass testing of the test helper function 'CheckBuffers'", function () {
        expect(CheckBuffers([1,2,3,4], [1,2,3,4])).toEqual(0);
        expect(CheckBuffers([1,2,3,4], [1,2.2,3,4.2])).toEqual(2);
    });

    it("should work for real size 2", function () {
        let re = new Float64Array([ 3.0000000,-1.0000000 ]);
        let im = new Float64Array([ 0.00000000,0.00000000 ]);
        let result = TestCorrectness(re, im);
        expect(result).toEqual({
            "reDiffs": 0,
            "imDiffs": 0,
            "reverseDiffs": 0
        })
    });

    it("should work for real size 4", function () {
        let re = new Float64Array([ 10.000000,-2.0000000,-2.0000000 ]);
        let im = new Float64Array([ 0.00000000,2.0000000,0.00000000 ]);
        let result = TestCorrectness(re, im);
        expect(result).toEqual({
            "reDiffs": 0,
            "imDiffs": 0,
            "reverseDiffs": 0
        })
    });

    it("should work for real size 8", function () {
        let re = new Float64Array([ 36.000000,-4.0000000,-4.0000000,-4.0000000,-4.0000000 ]);
        let im = new Float64Array([ 0,	9.65685424949238,	4,	1.65685424949238,	0]);
        let result = TestCorrectness(re, im);
        expect(result).toEqual({
            "reDiffs": 0,
            "imDiffs": 0,
            "reverseDiffs": 0
        })
    });

    it("should work for real size 16", function () {
        let re = new Float64Array([136.00000,-8.0000000,-8.0000000,-8.0000000,-8.0000000,-8.0000000,-8.0000000,-8.0000000,-8.0000000]);
        let im = new Float64Array([0,	40.2187159370068	,19.3137084989848,	11.9728461013239,	8,	5.34542910335439,	3.31370849898476,	1.59129893903727,	0]);
        let result = TestCorrectness(re, im);
        expect(result).toEqual({
            "reDiffs": 0,
            "imDiffs": 0,
            "reverseDiffs": 0
        })
    });

    it("should work for real size 32", function () {
        let re = new Float64Array([528.00000, -16.000000, -16.000000, -16.000000, -16.000000, -16.000000, -16.000000,
                               -16.000000,
                               -16.000000, -16.000000, -16.000000, -16.000000, -16.000000, -16.000000, -16.000000,
                               -16.000000, -16.000000]);
        let im = new Float64Array([0,	162.450726201742,	80.4374318740136,	52.7449313430131,	38.6274169979695,	29.9338945886302,	23.9456922026478,	19.4960564094076,	16,	13.1308606532586,	10.6908582067088,	8.55217817521267,	6.62741699796952,	4.85354693771748,	3.18259787807452,	1.57586245371462,	0]);
        let result = TestCorrectness(re, im);
        expect(result).toEqual({
            "reDiffs": 0,
            "imDiffs": 0,
            "reverseDiffs": 0
        })

        it("should work for real size 64", function () {
            let re = new Float64Array([ 2080.0000, -32.000000, -32.000000, -32.000000, -32.000000, -32.000000, -32.000000,
                               -32.000000, -32.000000,
                               -32.000000, -32.000000, -32.000000, -32.000000, -32.000000, -32.000000, -32.000000,
                               -32.000000, -32.000000,
                               -32.000000, -32.000000, -32.000000, -32.000000, -32.000000, -32.000000, -32.000000,
                               -32.000000, -32.000000,
                               -32.000000, -32.000000, -32.000000, -32.000000, -32.000000, -32.000000 ]);
            let im = new Float64Array([ 0.00000000, 651.37494, 324.90146, 215.72647, 160.87486, 127.75116, 105.48986, 89.434006,
                               77.254837, 67.658318,
                               59.867790, 53.388775, 47.891384, 43.147007, 38.992111, 35.306561, 32.000000, 29.003109,
                               26.261721, 23.732817,
                               21.381716, 19.180061, 17.104357, 15.134872, 13.254834, 11.449783, 9.7070942, 8.0155830,
                               6.3651958, 4.7467518,
                               3.1517248, 1.5720592, 0.00000000 ]);
            let result = TestCorrectness(re, im);
            expect(result).toEqual({
                "reDiffs": 0,
                "imDiffs": 0,
                "reverseDiffs": 0
            })
        });

        it("should work for real size 128", function () {
            let re = new Float64Array([ 8256.0000, -64.000000, -64.000000, -64.000000, -64.000000, -64.000000, -64.000000,
                                -64.000000, -64.000000,
                                -64.000000, -64.000000, -64.000000, -64.000000, -64.000000, -64.000000, -64.000000,
                                -64.000000, -64.000000,
                                -64.000000, -64.000000, -64.000000, -64.000000, -64.000000, -64.000000, -64.000000,
                                -64.000000, -64.000000,
                                -64.000000, -64.000000, -64.000000, -64.000000, -64.000000, -64.000000, -64.000000,
                                -64.000000, -64.000000,
                                -64.000000, -64.000000, -64.000000, -64.000000, -64.000000, -64.000000, -64.000000,
                                -64.000000, -64.000000,
                                -64.000000, -64.000000, -64.000000, -64.000000, -64.000000, -64.000000, -64.000000,
                                -64.000000, -64.000000,
                                -64.000000, -64.000000, -64.000000, -64.000000, -64.000000, -64.000000, -64.000000,
                                -64.000000, -64.000000,
                                -64.000000, -64.000000 ]);
            let im = new Float64Array([ 0.00000000, 2607.0710, 1302.7499, 867.62683, 649.80292, 518.89832, 431.45294, 368.84109,
                                321.74973, 285.00494,
                                255.50232, 231.26628, 210.97972, 193.73076, 178.86801, 165.91376, 154.50967, 144.38168,
                                135.31664, 127.14616,
                                119.73558, 112.97580, 106.77755, 101.06705, 95.782768, 90.873016, 86.294014, 82.008423,
                                77.984222, 74.193787,
                                70.613121, 67.221306, 64.000000, 60.933064, 58.006218, 55.206779, 52.523441, 49.946091,
                                47.465633, 45.073887,
                                42.763432, 40.527554, 38.360123, 36.255550, 34.208714, 32.214893, 30.269745, 28.369249,
                                26.509668, 24.687525,
                                22.899567, 21.142744, 19.414188, 17.711185, 16.031166, 14.371680, 12.730392, 11.105054,
                                9.4935036, 7.8936472,
                                6.3034496, 4.7209234, 3.1441183, 1.5711118, 0.00000000 ]);
            let result = TestCorrectness(re, im);
            expect(result).toEqual({
                "reDiffs": 0,
                "imDiffs": 0,
                "reverseDiffs": 0
            })
        });

        it("should work for real size 256", function () {
            let re = new Float64Array([ 32896.000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000,
                                -128.00000, -128.00000,
                                -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000,
                                -128.00000, -128.00000,
                                -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000,
                                -128.00000, -128.00000,
                                -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000,
                                -128.00000, -128.00000,
                                -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000,
                                -128.00000, -128.00000,
                                -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000,
                                -128.00000, -128.00000,
                                -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000,
                                -128.00000, -128.00000,
                                -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000,
                                -128.00000, -128.00000,
                                -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000,
                                -128.00000, -128.00000,
                                -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000,
                                -128.00000, -128.00000,
                                -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000,
                                -128.00000, -128.00000,
                                -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000,
                                -128.00000, -128.00000,
                                -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000,
                                -128.00000, -128.00000,
                                -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000, -128.00000,
                                -128.00000, -128.00000,
                                -128.00000, -128.00000, -128.00000 ]);
            let im = new Float64Array([ 0.00000000, 10429.854, 5214.1421, 3475.2219, 2605.4998, 2083.4570, 1735.2537, 1486.3871,
                                1299.6058, 1154.2147,
                                1037.7966, 942.44965, 862.90588, 795.51843, 737.68219, 687.48676, 643.49945, 604.62457,
                                570.00989, 538.98267,
                                511.00464, 485.64011, 462.53256, 441.38748, 421.95944, 404.04230, 387.46152, 372.06857,
                                357.73602, 344.35406,
                                331.82751, 320.07346, 309.01935, 298.60141, 288.76337, 279.45544, 270.63327, 262.25735,
                                254.29233, 246.70645,
                                239.47116, 232.56065, 225.95160, 219.62283, 213.55510, 207.73085, 202.13409, 196.75014,
                                191.56554, 186.56796,
                                181.74603, 177.08928, 172.58803, 168.23331, 164.01685, 159.93094, 155.96844, 152.12273,
                                148.38757, 144.75720,
                                141.22624, 137.78961, 134.44261, 131.18079, 128.00000, 124.89634, 121.86613, 118.90591,
                                116.01244, 113.18262,
                                110.41356, 107.70251, 105.04688, 102.44421, 99.892181, 97.388565, 94.931267, 92.518303,
                                90.147774, 87.817863,
                                85.526863, 83.273132, 81.055107, 78.871284, 76.720245, 74.600624, 72.511101, 70.450439,
                                68.417427, 66.410912,
                                64.429787, 62.472988, 60.539490, 58.628311, 56.738499, 54.869133, 53.019337, 51.188248,
                                49.375050, 47.578934,
                                45.799133, 44.034893, 42.285488, 40.550213, 38.828377, 37.119312, 35.422371, 33.736916,
                                32.062332, 30.398010,
                                28.743361, 27.097807, 25.460783, 23.831732, 22.210108, 20.595375, 18.987007, 17.384483,
                                15.787294, 14.194933,
                                12.606899, 11.022701, 9.4418468, 7.8638530, 6.2882366, 4.7145190, 3.1422236, 1.5708752,
                                0.00000000 ]);
            let result = TestCorrectness(re, im);
            expect(result).toEqual({
                "reDiffs": 0,
                "imDiffs": 0,
                "reverseDiffs": 0
            })
        });

    });
});
